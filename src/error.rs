/// The Error returned by scanf!() if matching or parsing failed.
pub enum Error {
    /// The Regex generated by scanf did not match the input string.
    ///
    /// Provides the input string and the generated Regex for debugging purposes.
    RegexMatchFailed(Box<dyn AsRef<str>>, &'static regex::Regex),
    /// The Regex matched, but any of the [`FromStr`](std::str::FromStr) implementations of the
    /// return types failed.
    ///
    /// Provides the 0-based index of the placeholder, the string that was given to
    /// [`FromStr`](std::str::FromStr) and the error that it returned.
    ///
    /// This case can indicate that the [`RegexRepresentation`](crate::RegexRepresentation) might
    /// be too lax or that the [`FromStr`](std::str::FromStr) implementation is incorrect.
    FromStrFailed(usize, String, Box<dyn std::error::Error>),
}

impl std::fmt::Debug for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::RegexMatchFailed(input, regex) => {
                write!(f, "RegexMatchFailed({:?}, {:?})", (**input).as_ref(), regex)
            }
            Error::FromStrFailed(index, input, error) => {
                write!(f, "FromStrFailed(placeholder: {}, input: {:?}, error: {:?})", index, input, error)
            }
        }
    }
}
