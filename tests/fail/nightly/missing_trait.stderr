error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
 --> tests/fail/nightly/missing_trait.rs:6:33
  |
6 |     sscanf::sscanf!("hi", "{}", module::NoFromScanf);
  |                                 ^^^^^^^^^^^^^^^^^^^ can't be parsed by sscanf
  |
  = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
  = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
  = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
  = help: the following other types implement trait `FromScanf<'input>`:
            `&'input str` implements `FromScanf<'input>`
            `Cow<'input, str>` implements `FromScanf<'input>`
            `NonZero<i128>` implements `FromScanf<'_>`
            `NonZero<i16>` implements `FromScanf<'_>`
            `NonZero<i32>` implements `FromScanf<'_>`
            `NonZero<i64>` implements `FromScanf<'_>`
            `NonZero<i8>` implements `FromScanf<'_>`
            `NonZero<isize>` implements `FromScanf<'_>`
          and $N others

error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
 --> tests/fail/nightly/missing_trait.rs:7:29
  |
7 |     sscanf::sscanf!("hi", "{module::NoFromScanf}");
  |                             ^^^^^^^^^^^^^^^^^^^ can't be parsed by sscanf
  |
  = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
  = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
  = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
  = help: the following other types implement trait `FromScanf<'input>`:
            `&'input str` implements `FromScanf<'input>`
            `Cow<'input, str>` implements `FromScanf<'input>`
            `NonZero<i128>` implements `FromScanf<'_>`
            `NonZero<i16>` implements `FromScanf<'_>`
            `NonZero<i32>` implements `FromScanf<'_>`
            `NonZero<i64>` implements `FromScanf<'_>`
            `NonZero<i8>` implements `FromScanf<'_>`
            `NonZero<isize>` implements `FromScanf<'_>`
          and $N others

error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
 --> tests/fail/nightly/missing_trait.rs:9:33
  |
9 |     sscanf::sscanf!("hi", "{}", NoFromScanf);
  |                                 ^^^^^^^^^^^ can't be parsed by sscanf
  |
  = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
  = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
  = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
  = help: the following other types implement trait `FromScanf<'input>`:
            `&'input str` implements `FromScanf<'input>`
            `Cow<'input, str>` implements `FromScanf<'input>`
            `NonZero<i128>` implements `FromScanf<'_>`
            `NonZero<i16>` implements `FromScanf<'_>`
            `NonZero<i32>` implements `FromScanf<'_>`
            `NonZero<i64>` implements `FromScanf<'_>`
            `NonZero<i8>` implements `FromScanf<'_>`
            `NonZero<isize>` implements `FromScanf<'_>`
          and $N others

error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
  --> tests/fail/nightly/missing_trait.rs:10:29
   |
10 |     sscanf::sscanf!("hi", "{NoFromScanf}");
   |                             ^^^^^^^^^^^ can't be parsed by sscanf
   |
   = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
   = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
   = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
   = help: the following other types implement trait `FromScanf<'input>`:
             `&'input str` implements `FromScanf<'input>`
             `Cow<'input, str>` implements `FromScanf<'input>`
             `NonZero<i128>` implements `FromScanf<'_>`
             `NonZero<i16>` implements `FromScanf<'_>`
             `NonZero<i32>` implements `FromScanf<'_>`
             `NonZero<i64>` implements `FromScanf<'_>`
             `NonZero<i8>` implements `FromScanf<'_>`
             `NonZero<isize>` implements `FromScanf<'_>`
           and $N others

error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
 --> tests/fail/nightly/missing_trait.rs:6:33
  |
6 |     sscanf::sscanf!("hi", "{}", module::NoFromScanf);
  |     ----------------------------^^^^^^^^^^^^^^^^^^^-
  |     |                           |
  |     |                           can't be parsed by sscanf
  |     required by a bound introduced by this call
  |
  = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
  = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
  = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
  = help: the following other types implement trait `FromScanf<'input>`:
            `&'input str` implements `FromScanf<'input>`
            `Cow<'input, str>` implements `FromScanf<'input>`
            `NonZero<i128>` implements `FromScanf<'_>`
            `NonZero<i16>` implements `FromScanf<'_>`
            `NonZero<i32>` implements `FromScanf<'_>`
            `NonZero<i64>` implements `FromScanf<'_>`
            `NonZero<i8>` implements `FromScanf<'_>`
            `NonZero<isize>` implements `FromScanf<'_>`
          and $N others
note: required by a bound in `MatchTree::<'t, 'input>::parse_at`
 --> src/match_tree.rs
  |
  |     pub fn parse_at<T: FromScanf<'input>>(&self, index: usize) -> Option<T> {
  |                        ^^^^^^^^^^^^^^^^^ required by this bound in `MatchTree::<'t, 'input>::parse_at`

error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
 --> tests/fail/nightly/missing_trait.rs:7:29
  |
7 |     sscanf::sscanf!("hi", "{module::NoFromScanf}");
  |     ------------------------^^^^^^^^^^^^^^^^^^^---
  |     |                       |
  |     |                       can't be parsed by sscanf
  |     required by a bound introduced by this call
  |
  = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
  = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
  = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
  = help: the following other types implement trait `FromScanf<'input>`:
            `&'input str` implements `FromScanf<'input>`
            `Cow<'input, str>` implements `FromScanf<'input>`
            `NonZero<i128>` implements `FromScanf<'_>`
            `NonZero<i16>` implements `FromScanf<'_>`
            `NonZero<i32>` implements `FromScanf<'_>`
            `NonZero<i64>` implements `FromScanf<'_>`
            `NonZero<i8>` implements `FromScanf<'_>`
            `NonZero<isize>` implements `FromScanf<'_>`
          and $N others
note: required by a bound in `MatchTree::<'t, 'input>::parse_at`
 --> src/match_tree.rs
  |
  |     pub fn parse_at<T: FromScanf<'input>>(&self, index: usize) -> Option<T> {
  |                        ^^^^^^^^^^^^^^^^^ required by this bound in `MatchTree::<'t, 'input>::parse_at`

error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
 --> tests/fail/nightly/missing_trait.rs:9:33
  |
9 |     sscanf::sscanf!("hi", "{}", NoFromScanf);
  |     ----------------------------^^^^^^^^^^^-
  |     |                           |
  |     |                           can't be parsed by sscanf
  |     required by a bound introduced by this call
  |
  = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
  = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
  = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
  = help: the following other types implement trait `FromScanf<'input>`:
            `&'input str` implements `FromScanf<'input>`
            `Cow<'input, str>` implements `FromScanf<'input>`
            `NonZero<i128>` implements `FromScanf<'_>`
            `NonZero<i16>` implements `FromScanf<'_>`
            `NonZero<i32>` implements `FromScanf<'_>`
            `NonZero<i64>` implements `FromScanf<'_>`
            `NonZero<i8>` implements `FromScanf<'_>`
            `NonZero<isize>` implements `FromScanf<'_>`
          and $N others
note: required by a bound in `MatchTree::<'t, 'input>::parse_at`
 --> src/match_tree.rs
  |
  |     pub fn parse_at<T: FromScanf<'input>>(&self, index: usize) -> Option<T> {
  |                        ^^^^^^^^^^^^^^^^^ required by this bound in `MatchTree::<'t, 'input>::parse_at`

error[E0277]: type `NoFromScanf` can't be parsed by sscanf because it does not implement `FromScanf`
  --> tests/fail/nightly/missing_trait.rs:10:29
   |
10 |     sscanf::sscanf!("hi", "{NoFromScanf}");
   |     ------------------------^^^^^^^^^^^---
   |     |                       |
   |     |                       can't be parsed by sscanf
   |     required by a bound introduced by this call
   |
   = help: the trait `FromScanf<'_>` is not implemented for `NoFromScanf`
   = note: derive or implement `FromScanf` for `NoFromScanf` to use it with `sscanf!`
   = note: see the `FromScanf` documentation for details: <https://docs.rs/sscanf/latest/sscanf/trait.FromScanf.html>
   = help: the following other types implement trait `FromScanf<'input>`:
             `&'input str` implements `FromScanf<'input>`
             `Cow<'input, str>` implements `FromScanf<'input>`
             `NonZero<i128>` implements `FromScanf<'_>`
             `NonZero<i16>` implements `FromScanf<'_>`
             `NonZero<i32>` implements `FromScanf<'_>`
             `NonZero<i64>` implements `FromScanf<'_>`
             `NonZero<i8>` implements `FromScanf<'_>`
             `NonZero<isize>` implements `FromScanf<'_>`
           and $N others
note: required by a bound in `MatchTree::<'t, 'input>::parse_at`
  --> src/match_tree.rs
   |
   |     pub fn parse_at<T: FromScanf<'input>>(&self, index: usize) -> Option<T> {
   |                        ^^^^^^^^^^^^^^^^^ required by this bound in `MatchTree::<'t, 'input>::parse_at`
