error: expected an expression after `=`
 --> tests/fail/derive_field_attributes.rs:3:37
  |
3 | struct TestNoValue(#[sscanf(default =)] u8);
  |                                     ^

error: expected `=`
 --> tests/fail/derive_field_attributes.rs:7:38
  |
7 | struct TestNoEquals(#[sscanf(default 5)] u8);
  |                                      ^

error: expected identifier
  --> tests/fail/derive_field_attributes.rs:11:29
   |
11 | struct TestNoIdent(#[sscanf(= 5)] u8);
   |                             ^

error: format strings can only be specified on structs and struct variants, not fields
  --> tests/fail/derive_field_attributes.rs:15:35
   |
15 | struct TestFormatInField(#[sscanf(format = "")] u8);
   |                                   ^^^^^^

error: a string argument without a `<label> = ` prefix is only valid for format strings on structs and struct variants
  --> tests/fail/derive_field_attributes.rs:19:42
   |
19 | struct TestImpliedFormatInField(#[sscanf("")] u8);
   |                                          ^^

error: expected either `default` or `map`, got `bob`
  --> tests/fail/derive_field_attributes.rs:23:32
   |
23 | struct TestUnknownArg(#[sscanf(bob = 5)] u8);
   |                                ^^^

error: unknown attribute `mao`. Did you mean `map`?
  --> tests/fail/derive_field_attributes.rs:27:31
   |
27 | struct TestTypoInArg(#[sscanf(mao)] u8);
   |                               ^^^

error: unknown attribute `defold`. Did you mean `default`?
  --> tests/fail/derive_field_attributes.rs:31:36
   |
31 | struct TestMoreTyposInArg(#[sscanf(defold)] u8);
   |                                    ^^^^^^

error: unnecessary arguments to the attribute. fields only allow a single attribute
  --> tests/fail/derive_field_attributes.rs:35:45
   |
35 | struct TestDuplicateArg(#[sscanf(default = 5, default = 5)] u8);
   |                                             ^^^^^^^^^^^^^

error: fields can only have one `sscanf` attribute
  --> tests/fail/derive_field_attributes.rs:39:53
   |
39 | struct TestDuplicateMultiArg(#[sscanf(default = 5)] #[sscanf(default = 5)] u8);
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^

error: unnecessary arguments to the attribute. fields only allow a single attribute
  --> tests/fail/derive_field_attributes.rs:43:46
   |
43 | struct TestDefaultAndMap(#[sscanf(default = 5, map = |x: usize| { x as u8 })] u8);
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: fields can only have one `sscanf` attribute
  --> tests/fail/derive_field_attributes.rs:47:54
   |
47 | struct TestDefaultAndMapMulti(#[sscanf(default = 5)] #[sscanf(map = |x: usize| { x as u8 })] u8);
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: FromScanf: field `0` is not specified in the format string and has no default value. You must specify exactly one of these.
       The syntax for default values is: `#[sscanf(default)]` to use Default::default() or `#[sscanf(default = ...)]` to provide a custom value.
  --> tests/fail/derive_field_attributes.rs:51:66
   |
51 | struct TestNoPlaceholder(#[sscanf(map = |x: usize| { x as u8 })] u8);
   |                                                                  ^^

error: format for map attributes is `#[sscanf(map = |<arg>: <type>| <conversion>)]`
  --> tests/fail/derive_field_attributes.rs:55:33
   |
55 | struct TestMapNoAssign(#[sscanf(map)] u8);
   |                                 ^^^

error: map attribute expects a closure like `|<arg>: <type>| <conversion>` after `=`
  --> tests/fail/derive_field_attributes.rs:59:36
   |
59 | struct TestMapNoValue(#[sscanf(map =)] u8);
   |                                    ^

error: map attribute expects a closure like `|<arg>: <type>| <conversion>` after `=`
  --> tests/fail/derive_field_attributes.rs:63:41
   |
63 | struct TestMapNotClosure(#[sscanf(map = "")] u8);
   |                                         ^^

error: expected `map` closure to take exactly one argument
  --> tests/fail/derive_field_attributes.rs:67:38
   |
67 | struct TestMapNoParam(#[sscanf(map = || { x as u8 })] u8);
   |                                      ^^

error: `map` closure has to specify the type of the argument
  --> tests/fail/derive_field_attributes.rs:71:38
   |
71 | struct TestMapNoType(#[sscanf(map = |x| { x as u8 })] u8);
   |                                      ^

error: expected `map` closure to take exactly one argument
  --> tests/fail/derive_field_attributes.rs:75:51
   |
75 | struct TestMapMoreTypes(#[sscanf(map = |x: usize, y: usize| { x as u8 })] u8);
   |                                                   ^^^^^^^^

error[E0308]: mismatched types
  --> tests/fail/derive_field_attributes.rs:81:48
   |
81 | struct TestDefaultWrongType(#[sscanf(default = "")] u8);
   |                                                ^^ expected `u8`, found `&str`

error[E0308]: mismatched types
  --> tests/fail/derive_field_attributes.rs:85:53
   |
85 | struct TestMapWrongReturn(#[sscanf(map = |x: usize| { x })] u8);
   |                                                     ^^^^^ expected `u8`, found `usize`

error[E0277]: the trait bound `ParseIntError: Default` is not satisfied
  --> tests/fail/derive_field_attributes.rs:89:48
   |
89 | struct TestDefaultNoDefault(#[sscanf(default)] std::num::ParseIntError);
   |                                                ^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `ParseIntError`
